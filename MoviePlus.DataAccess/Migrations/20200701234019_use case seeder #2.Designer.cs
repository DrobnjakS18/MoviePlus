// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviePlus.DataAccess;

namespace MoviePlus.DataAccess.Migrations
{
    [DbContext(typeof(MoviePlusContext))]
    [Migration("20200701234019_use case seeder #2")]
    partial class usecaseseeder2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviePlus.Domain.AuditLogger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogger");
                });

            modelBuilder.Entity("MoviePlus.Domain.Auditorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auditoriums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(2435),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Auditorium 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(3438),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Auditorium 2"
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(468),
                            Description = "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
                            Duration = 142,
                            Image = "d72a304f-b6b0-466f-806d-505756825176.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Shawshank Redemption "
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3317),
                            Description = "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
                            Duration = 175,
                            Image = "6d5dd6aa-477a-4a6d-9e32-1133607881c5.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Godfather"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3406),
                            Description = "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                            Duration = 152,
                            Image = "38e87283-fa50-4509-8a34-0b92afda5cc2.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3421),
                            Description = "A jury holdout attempts to prevent a miscarriage of justice by forcing his colleagues to reconsider the evidence.",
                            Duration = 96,
                            Image = "6d16d467-e8ac-4990-b5cd-1c3d103e82c0.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "12 Angry Men"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3431),
                            Description = "In German-occupied Poland during World War II, industrialist Oskar Schindler gradually becomes concerned for his Jewish workforce after witnessing their persecution by the Nazis.",
                            Duration = 195,
                            Image = "9b263823-5bf0-41a2-8ff2-a6c6f873c43c.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Schindler's List"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3446),
                            Description = "Gandalf and Aragorn lead the World of Men against Sauron's army to draw his gaze from Frodo and Sam as they approach Mount Doom with the One Ring.",
                            Duration = 201,
                            Image = "09459e52-bee9-4adc-8724-605b4f95fe62.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Lord of the Rings: The Return of the King"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(3457),
                            Description = "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.",
                            Duration = 154,
                            Image = "fc2645ba-d817-4a60-8150-f3c66777361b.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Pulp Fiction"
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MoviePlus.Domain.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScreeningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("AuditoriumId", "ScreeningTime")
                        .IsUnique();

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 329, DateTimeKind.Local).AddTicks(4331),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 1,
                            ScreeningTime = new DateTime(2020, 7, 4, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(973),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 2,
                            ScreeningTime = new DateTime(2020, 7, 2, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(1136),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 3,
                            ScreeningTime = new DateTime(2020, 7, 3, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(1160),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 4,
                            ScreeningTime = new DateTime(2020, 7, 6, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(1176),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 4,
                            ScreeningTime = new DateTime(2020, 7, 4, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(1194),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 6,
                            ScreeningTime = new DateTime(2020, 7, 5, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(1212),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 7,
                            ScreeningTime = new DateTime(2020, 7, 2, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(4617),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6193),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6243),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6254),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 4
                        },
                        new
                        {
                            Id = 5,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6261),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 5
                        },
                        new
                        {
                            Id = 6,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6274),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 6
                        },
                        new
                        {
                            Id = 7,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6283),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 7
                        },
                        new
                        {
                            Id = 8,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6290),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 8
                        },
                        new
                        {
                            Id = 9,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6298),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 9
                        },
                        new
                        {
                            Id = 10,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6309),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 10
                        },
                        new
                        {
                            Id = 11,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6317),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 1
                        },
                        new
                        {
                            Id = 12,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6324),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 2
                        },
                        new
                        {
                            Id = 13,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6332),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 3
                        },
                        new
                        {
                            Id = 14,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6339),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 4
                        },
                        new
                        {
                            Id = 15,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6346),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 5
                        },
                        new
                        {
                            Id = 16,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6353),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 6
                        },
                        new
                        {
                            Id = 17,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6362),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 7
                        },
                        new
                        {
                            Id = 18,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6372),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 8
                        },
                        new
                        {
                            Id = 19,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6379),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 9
                        },
                        new
                        {
                            Id = 20,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 330, DateTimeKind.Local).AddTicks(6386),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 10
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.SeatReserved", b =>
                {
                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SeatId", "ScreeningId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("SeatReserved");
                });

            modelBuilder.Entity("MoviePlus.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 324, DateTimeKind.Local).AddTicks(1186),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            Password = "A12450CFF6FB7A97C975BFB7FCBB8F7E",
                            Username = "adminAdmin"
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.UserUseCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserUseCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(7214),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8801),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8857),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8869),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8878),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8892),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8900),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8908),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8917),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8930),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 10,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8938),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 11,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8945),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8953),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 13,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8961),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 14,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8969),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 15,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8977),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 16,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(8985),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 17,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 7, 2, 1, 40, 18, 328, DateTimeKind.Local).AddTicks(9001),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 18,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Reservation", b =>
                {
                    b.HasOne("MoviePlus.Domain.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.Screening", b =>
                {
                    b.HasOne("MoviePlus.Domain.Auditorium", "Auditorium")
                        .WithMany("Screenings")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.Seat", b =>
                {
                    b.HasOne("MoviePlus.Domain.Auditorium", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.SeatReserved", b =>
                {
                    b.HasOne("MoviePlus.Domain.Reservation", "Reservation")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Screening", "Screening")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Seat", "Seat")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.UserUseCases", b =>
                {
                    b.HasOne("MoviePlus.Domain.User", "Users")
                        .WithMany("UserUseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
