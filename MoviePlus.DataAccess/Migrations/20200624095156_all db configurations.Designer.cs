// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviePlus.DataAccess;

namespace MoviePlus.DataAccess.Migrations
{
    [DbContext(typeof(MoviePlusContext))]
    [Migration("20200624095156_all db configurations")]
    partial class alldbconfigurations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviePlus.Domain.AuditLogger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogger");
                });

            modelBuilder.Entity("MoviePlus.Domain.Auditorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatNumbers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auditoriums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(2147),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Auditorium 1",
                            SeatNumbers = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(2982),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Auditorium 2",
                            SeatNumbers = 30
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(8402),
                            Description = "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
                            Duration = 142,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Shawshank Redemption "
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9676),
                            Description = "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
                            Duration = 175,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Godfather"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9720),
                            Description = "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
                            Duration = 152,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9724),
                            Description = "A jury holdout attempts to prevent a miscarriage of justice by forcing his colleagues to reconsider the evidence.",
                            Duration = 96,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "12 Angry Men"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9728),
                            Description = "In German-occupied Poland during World War II, industrialist Oskar Schindler gradually becomes concerned for his Jewish workforce after witnessing their persecution by the Nazis.",
                            Duration = 195,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Schindler's List"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9734),
                            Description = "Gandalf and Aragorn lead the World of Men against Sauron's army to draw his gaze from Frodo and Sam as they approach Mount Doom with the One Ring.",
                            Duration = 201,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "The Lord of the Rings: The Return of the King"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(9737),
                            Description = "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.",
                            Duration = 154,
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Pulp Fiction"
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(7097),
                            IsActive = true,
                            IsDeleted = false,
                            ScreeningId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(7888),
                            IsActive = true,
                            IsDeleted = false,
                            ScreeningId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(7914),
                            IsActive = true,
                            IsDeleted = false,
                            ScreeningId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScreeningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("MovieId");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(246),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 1,
                            ScreeningTime = new DateTime(2020, 7, 1, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(1590),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 3,
                            ScreeningTime = new DateTime(2020, 7, 2, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(1623),
                            IsActive = true,
                            IsDeleted = false,
                            MovieId = 5,
                            ScreeningTime = new DateTime(2020, 7, 3, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(3495),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 1,
                            Row = 1
                        },
                        new
                        {
                            Id = 2,
                            AuditoriumId = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(4732),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 2,
                            Row = 1
                        },
                        new
                        {
                            Id = 3,
                            AuditoriumId = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(4770),
                            IsActive = true,
                            IsDeleted = false,
                            Number = 1,
                            Row = 2
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.SeatReserved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatsReserved");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(5248),
                            IsActive = true,
                            IsDeleted = false,
                            ReservationId = 1,
                            ScreeningId = 1,
                            SeatId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(6413),
                            IsActive = true,
                            IsDeleted = false,
                            ReservationId = 2,
                            ScreeningId = 1,
                            SeatId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 252, DateTimeKind.Local).AddTicks(6448),
                            IsActive = true,
                            IsDeleted = false,
                            ReservationId = 2,
                            ScreeningId = 1,
                            SeatId = 3
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 247, DateTimeKind.Local).AddTicks(9186),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            Password = "pass123",
                            Username = "adminAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(5354),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "user",
                            Password = "pass123",
                            Username = "userUser"
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.UserUseCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserUseCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(6472),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(7760),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(7794),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 24, 11, 51, 56, 251, DateTimeKind.Local).AddTicks(7798),
                            IsActive = true,
                            IsDeleted = false,
                            UseCaseId = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MoviePlus.Domain.Reservation", b =>
                {
                    b.HasOne("MoviePlus.Domain.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.Screening", b =>
                {
                    b.HasOne("MoviePlus.Domain.Auditorium", "Auditorium")
                        .WithMany("Screenings")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.Seat", b =>
                {
                    b.HasOne("MoviePlus.Domain.Auditorium", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.SeatReserved", b =>
                {
                    b.HasOne("MoviePlus.Domain.Reservation", "Reservation")
                        .WithMany("SeatReserved")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Screening", "Screening")
                        .WithMany("SeatReserved")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoviePlus.Domain.Seat", "Seat")
                        .WithMany("SeatReserved")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePlus.Domain.UserUseCases", b =>
                {
                    b.HasOne("MoviePlus.Domain.User", "Users")
                        .WithMany("UserUseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
